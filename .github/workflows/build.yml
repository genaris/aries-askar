name: "Aries-Askar"

"on":
  push:
    branches: "**"
  pull_request:
    branches: [main]
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      publish:
        description: "Publish packages"
        required: true
        default: "false"
      publish-wrappers:
        description: 'Publish Wrappers to Registries'
        required: true
        default: false
        type: boolean        

jobs:
  check:
    name: Run checks
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.56
          override: true
          components: clippy, rustfmt

      - name: Cache cargo resources
        uses: Swatinem/rust-cache@v1
        with:
          sharedKey: check
          cache-on-failure: true

      - name: Cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --workspace

      - name: Debug build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-targets

      - if: "runner.os == 'Linux'"
        name: Start postgres (Linux)
        run: |
          sudo systemctl start postgresql.service
          pg_isready
          sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'postgres'"
          echo "POSTGRES_URL=postgres://postgres:postgres@localhost:5432/test-db" >> $GITHUB_ENV
          echo "TEST_FEATURES=pg_test" >> $GITHUB_ENV

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --features "${{ env.TEST_FEATURES }}" -- --nocapture --test-threads 1 --skip contention
        env:
          RUST_BACKTRACE: full
          # RUST_LOG: debug

      - name: Test askar-crypto no_std
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path ./askar-crypto/Cargo.toml --no-default-features

      - name: Test askar-wql
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path ./askar-wql/Cargo.toml

      - name: Test askar-bbs no_std
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path ./askar-bbs/Cargo.toml --no-default-features

  build-manylinux:
    name: Build (manylinux)
    needs: [check]

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            lib: libaries_askar.so
            container: andrewwhitehead/manylinux2014-base

    container: ${{ matrix.container }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.56
          override: true

      - name: Cache cargo resources
        uses: Swatinem/rust-cache@v1
        with:
          sharedKey: check

      - name: Build library
        env:
          BUILD_TARGET: ${{ matrix.target }}
          # LIBSQLITE3_FLAGS: SQLITE_DEBUG SQLITE_MEMDEBUG
        run: sh ./build.sh

      - name: Upload library artifacts
        uses: actions/upload-artifact@v2
        with:
          name: library-${{ runner.os }}
          path: target/release/${{ matrix.lib }}

  build-native:
    name: Build (native)
    needs: [check]

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-11
            lib: libaries_askar.dylib
            target: apple-darwin # creates a universal library
            toolchain: nightly-2021-10-21 #  beta required for aarch64-apple-darwin target
          - os: windows-latest
            lib: aries_askar.dll
            toolchain: 1.56

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Cache cargo resources
        uses: Swatinem/rust-cache@v1
        with:
          sharedKey: check

      - name: Build library
        env:
          BUILD_TARGET: ${{ matrix.target }}
          BUILD_TOOLCHAIN: ${{ matrix.toolchain }}
          # LIBSQLITE3_FLAGS: SQLITE_DEBUG SQLITE_MEMDEBUG
        run: sh ./build.sh

      - name: Upload library artifacts
        uses: actions/upload-artifact@v2
        with:
          name: library-${{ runner.os }}
          path: target/release/${{ matrix.lib }}

  build-javascript:
      name: Build and Test JavaScript wrapper
      needs: [build-manylinux]
      runs-on: ubuntu-latest
      defaults:
        run:
          working-directory: wrappers/javascript

      steps:
        - name: Checkout
          uses: actions/checkout@v3

        - name: Set up Node.JS 16.x
          uses: actions/setup-node@v3
          with:
            node-version: 16.x

        - name: Fetch library artifacts
          uses: actions/download-artifact@v2
          with:
            name: library-linux

        - name: Install dependencies
          run: yarn install

        - name: Build JavaScript Wrapper
          run: yarn build

        - name: Lint JavaScript Wrapper
          run: yarn lint

        - name: Format Check JavaScript Wrapper
          run: yarn check-format

        - name: Type Check JavaScript Wrapper
          run: yarn check-types

        - name: Test JavaScript Wrapper
          env:
            # binary is downloaded to root of repository
            LIB_ARIES_ASKAR_PATH: ../../../
          run: yarn test

        - name: Set NPM config
          if: |
            github.event_name == 'release' ||
            (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-wrappers == 'true')
          run: |
            echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> .npmrc
            echo "registry=https://registry.npmjs.org/" >> .npmrc
            echo "always-auth=true" >> .npmrc
        # TODO: this will currently publish the version as defined in the package.json. If the version already
        # exists on NPM it will skip the publishing. This means if a new version is released, but the version hasn't been
        # updated in the package.json files yet, it won't publish to NPM (which is kinda nice). We should however add a check
        # to see if the JS version matches the release version (do we want to keep the js and rust version in sync?)
        - name: Publish JavaScript Wrapper
          if: |
            github.event_name == 'release' ||
            (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-wrappers == 'true')
          run: npx lerna publish from-package --no-push --no-private --yes --no-git-tag-version
